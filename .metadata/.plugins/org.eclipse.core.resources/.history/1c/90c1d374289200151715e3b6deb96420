//V3.0.0

package ProcessorLibrary;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import com.microsoft.sqlserver.jdbc.SQLServerException;

import PDULibrary.AppProperty;
import PDULibrary.GestorCola;

public class PositionReportToDBEngine extends Thread {
	AppProperty AP;
	PDULibrary.PDU PDU;
	String DBParameters;

	Connection DBConection = null;
	Statement stmINS = null, stmSEL = null, stm = null, stm2 = null;
	ResultSet rs = null;
	String C2;
	String Temperatura1;
	// private int i=0;
	// BufferProcessorX_ReverseGeocoder[] RG;

	public GestorCola BufferEntrada = new GestorCola();

	private int IntentoConexionDB = 0;

	boolean DebugERROR, DebugTRAN, EventAlert, toTerminalPDU = false;

	private void AbrirDB() 
	{
		try {

			IntentoConexionDB++;
			DBConection = DriverManager.getConnection(DBParameters);
			IntentoConexionDB = 0;

		} catch (SQLException e) {
			if (IntentoConexionDB == 5) {
				System.err.println("ERROR: PositionReportToDBEngine: AbrirDB: "
						+ e.toString());
				IntentoConexionDB = 0;
			}
			CerrarDB();

		} catch (Exception EXC) {
			System.err.println("ERROR: PositionReportToDBEngine: AbrirDB: "
					+ EXC.toString());
			CerrarDB();
		} catch (Throwable T) {
			System.err.println("ERROR: PositionReportToDBEngine: AbrirDB: ");
			T.printStackTrace();
			CerrarDB();
		} finally {
			if (DBConection != null) {
				try {
					Thread.sleep(2000);
				} catch (Exception ee) {

				}
			}
		}

	}

	private void CerrarDB() {
		try {
			if (rs != null)
				rs.close();
			rs = null;
		} catch (Exception e) {
			rs = null;
		}

		try {
			if (stm != null)
				stm.close();
			stm = null;
		} catch (Exception e) {
			stm = null;
		}

		try {
			if (stm2 != null)
				stm2.close();
			stm = null;
		} catch (Exception e) {
			stm2 = null;
		}

		try {
			if (stmINS != null)
				stmINS.close();
			stmINS = null;
		} catch (Exception e) {
			stmINS = null;
		}
		try {
			if (stmSEL != null)
				stmSEL.close();
			stmSEL = null;
		} catch (Exception e) {
			stmSEL = null;
		}
		try {
			if (DBConection != null)
				DBConection.close();
			DBConection = null;
		} catch (Exception e2) {
			DBConection = null;
		}
	}

	public void run() {
		int c=0;

		long t = System.currentTimeMillis();
		long pg = 0;
		boolean ActualizarUltimaPosicion=true;

		while (true) 
		{
			try {
				if (BufferEntrada.tamano() > 0)
				{
					if (DBConection == null)
						this.AbrirDB();

					if (DBConection != null) 
					{
						PDU = (PDULibrary.PDU) BufferEntrada.getElemento();

						if (PDU != null && PDU.isPositionReportPDU() ) 
						{
							try{
								System.err.println(PDU.getTemperatura1());
								
								if (PDU.getTemperatura1().equalsIgnoreCase("999.00")){
									Temperatura1="null";
									System.err.println("entras!!")
								}else{
									Temperatura1=PDU.getTemperatura1();
								}
								C2 = "INSERT INTO REPORTEPOSICION VALUES('"
										+ PDU.getReportDateTime() + "','"
										+ PDU.getModemID() + "',"
										+ PDU.getUserSpecifiedNumber()
										+ ",getdate(),'"
										+ PDU.getReportDateTimeGPS() + "','"
										+ PDU.getReportDateTimeRTC() + "',"
										+ PDU.getLatitude() + ","
										+ PDU.getLongitude() + ","
										+ PDU.getAltitude() + ","
										+ PDU.getSpeed() + ","
										+ PDU.getHeading() + ","
										+ PDU.getNumberOfSatellites() + ",'"
										+ PDU.getGPSStatus() + "',"
										+ PDU.getOdometer() + ",'"
										+ PDU.getIO_CFG() + "','"
										+ PDU.getIO_STATE() + "',"
										+ PDU.getInputEvent() + ",null,"
										+ PDU.getIgnitionState() + ","
										+ Temperatura1 + ","
										+ PDU.getTemperatura2() + ",null,"+ PDU.getHorometer() +")";

							}catch (Exception e)
							{
								C2 = null;
								try 
								{
									System.err.println("PositionReportToDBEngine: Run: 1:" + e.toString());
								} catch (Exception e2) 
								{
									System.err.println("PositionReportToDBEngine: Run: 1: Error para visualizar motivo de Excepcion");
								}
							}

							ActualizarUltimaPosicion=true;
							
							if (C2 != null) 
							{
								stmINS = DBConection.createStatement();
								

								try{
									stmINS.execute(C2);
									pg++;
								}catch( SQLServerException eee ) 
								{ 
									if( eee.toString().indexOf("PRIMARY KEY") == -1 )
									{
										System.err.println("SQLServerException: PositionReportToDBEngine: Run: ReportePosicion1: " + eee.toString() );
										System.err.println("C2: "+ C2  );
									}
									ActualizarUltimaPosicion=false;
								}catch( Exception e)
								{
									System.err.println("Exception: PositionReportToDBEngine: Run: ReportePosicion2: " + e.toString() );
									ActualizarUltimaPosicion=false;
								}
								finally
								{
									if (stmINS != null){ stmINS.close(); } stmINS = null;
								}

								if( ActualizarUltimaPosicion )
								{
									stm = DBConection.createStatement();
	
									/*if (PDU.getGPSStatus().compareTo("1") == 0) 
									{*/
										c = stm.executeUpdate("UPDATE REPORTEPOSICION_LAST SET FechaHora = '"
												+ PDU.getReportDateTime()
												+ "',Evento = "
												+ PDU.getUserSpecifiedNumber()
												+ ",FechaHoraGPS='"
												+ PDU.getReportDateTimeGPS()
												+ "',FechaHoraRTC='"
												+ PDU.getReportDateTimeRTC()
												+ "',Latitud="
												+ PDU.getLatitude()
												+ ",Loogitud="
												+ PDU.getLongitude()
												+ ",Altitud="
												+ PDU.getAltitude()
												+ ",Velocidad="
												+ PDU.getSpeed()
												+ ",Rumbo="
												+ PDU.getHeading()
												+ ",NumeroSatelites="
												+ PDU.getNumberOfSatellites()
												+ ",EstadoGPS='"
												+ PDU.getGPSStatus()
												+ "',Odometro="
												+ PDU.getOdometer()
												+ ",ConfiguracionIO='"
												+ PDU.getIO_CFG()
												+ "',EstadoIO='"
												+ PDU.getIO_STATE()
												+ "',EventoEntrada="
												+ PDU.getInputEvent()
												+ ",Calle = null, EstadoIgnicion="
												+ PDU.getIgnitionState()
												+ ",FechaHoraActualizacion=GETDATE(),Source = '"
												+ PDU.getIP()
												+ ":"
												+ PDU.getPuerto()
												+ "',IDPROTOCOLO="
												+ PDU.getIdProtocolo()
												+ ",Temperatura="
												+ Temperatura1
												+ ",Combustible="
												+ PDU.getTemperatura2()
												+ ",HorometroTotal="
												+ PDU.getHorometer()
												+ " "
												+ "WHERE ID = '"
												+ PDU.getModemID()
												+ "' AND FECHAHORA < '"
												+ PDU.getReportDateTime() + "'");
									/*}else
									{
										c = stm.executeUpdate("UPDATE REPORTEPOSICION_LAST SET FechaHoraActualizacion=GETDATE(), Source = '"
												+ PDU.getIP()
												+ ":"
												+ PDU.getPuerto()
												+ "',IDPROTOCOLO="
												+ PDU.getIdProtocolo()
												+ " "
												+ "WHERE ID = '"
												+ PDU.getModemID()
												+ "'");
									}*/
	
									
									try{
										if (stm != null) 
											stm.close();
									}catch (Exception eee){ }finally{ stm=null; }
									
									if (c < 1) 
									{
										stm2 = DBConection.createStatement();
										stm2.execute("INSERT INTO REPORTEPOSICION_LAST VALUES('"
												+ PDU.getReportDateTime()
												+ "','"
												+ PDU.getModemID()
												+ "',"
												+ PDU.getUserSpecifiedNumber()
												+ ",'"
												+ PDU.getReportDateTimeGPS()
												+ "','"
												+ PDU.getReportDateTimeRTC()
												+ "',"
												+ PDU.getLatitude()
												+ ","
												+ PDU.getLongitude()
												+ ","
												+ PDU.getAltitude()
												+ ","
												+ PDU.getSpeed()
												+ ","
												+ PDU.getHeading()
												+ ","
												+ PDU.getNumberOfSatellites()
												+ ",'"
												+ PDU.getGPSStatus()
												+ "',"
												+ PDU.getOdometer()
												+ ",'"
												+ PDU.getIO_CFG()
												+ "','"
												+ PDU.getIO_STATE()
												+ "',"
												+ PDU.getInputEvent()
												+ ",null,"
												+ PDU.getIgnitionState()
												+ ",getdate(),'"
												+ PDU.getIP()
												+ ":"
												+ PDU.getPuerto()
												+ "', "
												+ PDU.getIdProtocolo() 
												+ ","
												+ Temperatura1
												+ ","
												+ PDU.getTemperatura2()+",null," + PDU.getHorometer() + ")");	
										try{
											if (stm2 != null) 
												stm2.close();
										}catch (Exception eee){ }finally{ stm2=null; } 
									
									}
								}	
							}
						}

						PDU = null;
					}else 
					{
						try{ sleep(1000); }catch ( Exception e ){ }
					}
				}

				if (System.currentTimeMillis() - t > 60000)
				{
					if (BufferEntrada.tamano() > 0)
						System.err.println("MSG: PositionReportToDBEngine: Run: PDU guardados "
											+ pg
											+ ": Buffer Pediente de Guardar "
											+ BufferEntrada.tamano()
											+ ": Durante "
											+ (System.currentTimeMillis() - t)
											+ " milisegundos");

					t = System.currentTimeMillis();

					pg = 0;

				}

				try{ sleep(30);	}catch( Exception e ){	}
				
			}catch (SQLException se)
			{
				if (se.toString().indexOf("PRIMARY KEY") > 0) 
				{
					try{
						if (stm != null)
							stm.close();
						stm = null;
					}catch (Exception ee) 
					{
						stm = null;
					}

					try{
						if (stm2 != null)
							stm2.close();
						stm = null;
					}catch (Exception ee) 
					{
						stm2 = null;
					}

					try{
						if (stmINS != null)
							stmINS.close();
						stmINS = null;
					}catch (Exception ee) 
					{
						stmINS = null;
					}
					
				}else 
				{
					PDU = null;
					this.CerrarDB();

					System.err.println("SQLException: PositionReportToDBEngine: " + se.toString());
					System.err.println(C2);
				}
			}catch(Exception e) 
			{
				try{
					System.err.println("Exception: PositionReportToDBEngine: Run: " + e.toString());
					System.err.println(C2);
				}catch (Exception e2) 
				{
					System.err.println("ERROR: PositionReportToDBEngine: Run: Error para visualizar motivo de excepcion");
				}
			}catch(Throwable e) 
			{
				System.err.println("ERROR: PositionReportToDBEngine: ");
				e.printStackTrace();
			}
		}
	}

	public void finalize() 
	{
		try {

			CerrarDB();

			if (this.getState().compareTo(Thread.State.TERMINATED) != 0)
				System.err.println("MSG: PositionReportToDBEngine: Finalize: " + this.getState());

			super.finalize();

		}catch (Throwable e) 
		{
			System.err.println("ERROR: PositionReportToDBEngine: Finalize: ");
			e.printStackTrace();
		}
	}

	public PositionReportToDBEngine(AppProperty tmpAP) 
	{
		try {
			this.setName(this.getName() + ": PositionReportPDUToDBEngine");

			AP = tmpAP;

			DBParameters = AP.getProperty("JdbcUrl") + "://"
							+ AP.getProperty("DBGpsUnitX_Address") + ":"
							+ AP.getProperty("DBGpsUnitX_Port") + ";Database="
							+ AP.getProperty("DBGpsUnitX_Name") + ";User="
							+ AP.getProperty("DBGpsUnitX_User") + ";Password="
							+ AP.getProperty("DBGpsUnitX_PWD");

			if( AP.getProperty( "DebugUDPAPItoDBError" ).compareTo( "true" ) == 0 )
				DebugERROR = true;
			else
				DebugERROR = false;

			if( AP.getProperty( "DebugUDPAPItoDBTran" ).compareTo( "true" ) == 0 )
				DebugTRAN = true;
			else
				DebugTRAN = false;

			this.start();

		}catch (Exception e) 
		{
			try{
				if (DebugERROR)
					System.err.println("ERROR: PositionReportPDUToDBEngine: " + e.toString());
			}catch (Exception e2) 
			{
				System.err.println("ERROR: PositionReportPDUToDBEngine: Error para visualizar motivo de excepcion");
			}
			DBParameters = "";
		}

	}

}
